// $ANTLR 2.7.1: "mappingPathParser.g" -> "MappingPathParser.java"$

	package jsdai.mappingUtils.paths;

	import java.util.*;
	import java.awt.event.WindowAdapter;
	import java.awt.event.WindowEvent;
	import javax.swing.JFrame;

	import jsdai.lang.*;
	import jsdai.SExtended_dictionary_schema.*;
	import jsdai.SMapping_schema.*;
	import jsdai.mappingUtils.MappingData;
	import jsdai.tools.RepositoryChanges;
	import antlr.*;

	import java.io.*;

public interface MappingPathParserTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int SCHEMA_MAPPING = 4;
	int UOF_MAPPING = 5;
	int ENTITY_MAPPING = 6;
	int ATTRIBUTE_MAPPING = 7;
	int EQ_ENTITY = 8;
	int EQ_ATTRIBUTE = 9;
	int ENTITY = 10;
	int ENTITY_AGGREG = 11;
	int ATTRIBUTE = 12;
	int ATTRIBUTE_AGGREG = 13;
	int TEMPLATE_CALL = 14;
	int SELECT = 15;
	int CONSTRAINT = 16;
	int OR = 17;
	int OR_EXTENDED = 18;
	int AND = 19;
	int AND_CONSTRUCT = 20;
	int OR_END = 21;
	int AND_END = 22;
	int INT = 23;
	int FLOAT = 24;
	int ENUM = 25;
	int LAST = 26;
	int ARM = 27;
	int ARM_ATTRIBUTE = 28;
	int AIM = 29;
	int AIM_ATTRIBUTE = 30;
	int SUB = 31;
	int SUPER = 32;
	int TOPOINT = 33;
	int FROMPOINT = 34;
	int EXTENDED_INTO = 35;
	int EXTENSION_OF = 36;
	int ATTRIBUTE_NEGATION = 37;
	int NEGATION = 38;
	int STATE_LINK = 39;
	int ORIGINAL_LOCATION = 40;
	int SCHEMA_MAPPING_INFO = 41;
	int STRONG = 42;
	int ENTRY_POINT = 43;
	int STRONG_USERS = 44;
	int DERIVED_VARIANT = 45;
	int LITERAL_schema_mapping = 46;
	int ID = 47;
	int OPAREN = 48;
	int COMMA = 49;
	int CPAREN = 50;
	int SEP = 51;
	int LITERAL_end_schema_mapping = 52;
	int LITERAL_include = 53;
	int STRING = 54;
	int LITERAL_uof_mapping = 55;
	int LITERAL_end_uof_mapping = 56;
	int LITERAL_entity_mapping = 57;
	int LITERAL_end_entity_mapping = 58;
	int LITERAL_mapping_constraints = 59;
	int LITERAL_end_mapping_constraints = 60;
	int LITERAL_attribute_mapping = 61;
	int LITERAL_end_attribute_mapping = 62;
	int VBAR = 63;
	int OSQBRAC = 64;
	int LITERAL_i = 65;
	int CSQBRAC = 66;
	int DOT = 67;
	int SLASH = 68;
	int EQ = 69;
	int OANBRAC = 70;
	int CANBRAC = 71;
	int NEQ = 72;
	int EXCLAM = 73;
	int OBRACE = 74;
	int CBRACE = 75;
	int MACRO = 76;
	int LITERAL_schema_mapping_info = 77;
	int LITERAL_end_schema_mapping_info = 78;
	int LITERAL_entity = 79;
	int LITERAL_end_entity = 80;
	int LITERAL_attribute = 81;
	int LITERAL_end_attribute = 82;
	int LITERAL_strong = 83;
	int LITERAL_for = 84;
	int COLON = 85;
	int LITERAL_mapped_values = 86;
	int LITERAL_as = 87;
	int LITERAL_entry_point = 88;
	int LITERAL_strong_users = 89;
	int LITERAL_derived_variant = 90;
	int LITERAL_end_derived_variant = 91;
	int WS = 92;
	int MULTI_LINE_COMMENT = 93;
	int SINGLE_LINE_COMMENT = 94;
	int LETTER = 95;
	int DIGIT = 96;
	int ASTERISK = 97;
}
